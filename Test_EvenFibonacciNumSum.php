<?php
/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
**/

class Test_EvenFibonacciNumSum extends PHPUnit_Framework_TestCase
{
    function testEvenFibonacciNumSum(){
        
        $obj = new evenFibonaciNumSum();
        
        // make sure methods exists
        $this->assertTrue( method_exists($obj,'evenFibonacciNumSum'), 'No method "evenFibonacciNumSum" found.' );
        
        // we expect it to take a limit parameter
        $refl = new ReflectionMethod($obj, 'evenFibonacciNumSum');
        $numParams = $refl->getNumberOfParameters();
        $this->assertEquals(1,$numParams, 'Method "evenFibonacciNumSum" is expected to accept one parameter.');
        
        // expect class to have limit parameter
        $this->assertObjectHasAttribute( 'limit', $obj );
        
        // we are expecting it to return an interger
        $this->assertTrue( is_int( $obj->evenFibonacciNumSum()), 'Method "evenFibonacciNumSum" is expected to return an integer.' );
        
        // make sure generate sequence methods exists
        $this->assertTrue( method_exists($obj,'generateFibonacciSeq'), 'No method "generateFibonacciSeq" found.' );
        
        // we are expecting it to return an array
        $this->assertTrue( is_array( $obj->generateFibonacciSeq()), 'Method "generateFibonacciSeq" is expected to return an array.' );
        
        
        // expect that fibanacci sequence does not exceed 4 million        
        $this->assertLessThanOrEqual(4000000,array_sum( $obj->generateFibonacciSeq() ));
        
    }
}

class evenFibonaciNumSum{
    
    private $limit;
    
    function generateFibonacciSeq( ){
        $limit = $this->limit;
        
        return array(4000000);
        
    }
    
    function evenFibonacciNumSum( $limit = 4000000 ){
        $this->limit = $limit;
        return 0;
    }
    
}

?>